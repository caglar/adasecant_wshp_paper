!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: 'train',
        start: 0,
        stop: 50000
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [
                 !obj:pylearn2.models.maxout.Maxout {
                     layer_name: 'h0',
                     num_units: 240,
                     num_pieces: 5,
                     irange: .005,
                     max_col_norm: 1.9365,
                 },
                 !obj:pylearn2.models.maxout.Maxout {
                     layer_name: 'h1',
                     num_units: 240,
                     num_pieces: 5,
                     irange: .005,
                     max_col_norm: 1.9365,
                 },
                !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 10,
                     irange: .005
                 }
                ],
        nvis: 784,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: 1e-7,
        learning_rule: !obj:adasecant.codes.learning_rule.Adasecant {
                start_var_reduction: 2000,
                use_adagrad: True,
        },
        monitoring_dataset:
        {
            'train' : *train,
            'valid' : !obj:pylearn2.datasets.mnist.MNIST {
                          which_set: 'train',
                          start: 50000,
                          stop:  60000
                      },
            'test'  : !obj:pylearn2.datasets.mnist.MNIST {
                          which_set: 'test',
                      }
        },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : .8 },
            input_scales: { 'h0': 1. }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: 350
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_norm_best2_new_res_clip1_newoutlier_nodelta_v2_fix_dbg.pkl"
        },
        #!obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
        #    start: 1,
        #    saturate: 300,
        #    final_momentum: 0.2
        #},
    ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_norm3_new_res_clip1_newoutlier_nodelta_v2_fix_dbg.pkl",
    save_freq: 1
}
