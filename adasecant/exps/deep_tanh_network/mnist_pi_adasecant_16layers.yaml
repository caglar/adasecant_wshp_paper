!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.mnist.MNIST {
        which_set: 'train',
        start: 0,
        stop: 50000
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [
                 !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h0',
                     dim: 240,
                     irange: .005
                 },
                 !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h1',
                     dim: 240,
                     irange: .005
                 },
                 !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h2',
                     dim: 240,
                     irange: .005
                 },
                 !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h3',
                     dim: 240,
                     irange: .005
                 },
                 !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h4',
                     dim: 240,
                     irange: .005
                 },
                 !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h5',
                     dim: 240,
                     irange: .005
                 },
                 !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h6',
                     dim: 240,
                     irange: .005
                 },
                 !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h7',
                     dim: 240,
                     irange: .005
                 },
                 !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h8',
                     dim: 240,
                     irange: .005
                 },
                 !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h9',
                     dim: 240,
                     irange: .005
                 },
                 !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h10',
                     dim: 240,
                     irange: .005
                 },
                 !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h11',
                     dim: 240,
                     irange: .005
                 },
                  !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h12',
                     dim: 240,
                     irange: .005
                 },
                 !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h13',
                     dim: 240,
                     irange: .005
                 },
                 !obj:pylearn2.models.mlp.Tanh {
                     layer_name: 'h14',
                     dim: 240,
                     irange: .005
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     layer_name: 'y',
                     n_classes: 10,
                     irange: .005
                 }
               ],
        nvis: 784,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 512,
        #TODO solve this issue:
        # pylearn2 gets angry if you don't provide
        # a learning rate!
        learning_rate: 1e-7,
        learning_rule: !obj:adasecant.codes.learning_rule.Adasecant {
            start_var_reduction: 500,
            use_adagrad: True,
            gamma_clip: 1.8,
            grad_clip: 25
        },
        monitoring_dataset:
        {
            'train' : *train,
            'valid' : !obj:pylearn2.datasets.mnist.MNIST {
                          which_set: 'train',
                          start: 50000,
                          stop:  60000
                      },
            'test'  : !obj:pylearn2.datasets.mnist.MNIST {
                          which_set: 'test',
                      }
        },
       termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: 350
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_norm_best.pkl"
        },
    ],
    save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_norm.pkl",
    save_freq: 1
}
